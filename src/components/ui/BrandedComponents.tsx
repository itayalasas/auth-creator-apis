/* Auto-generated by AuthSystem - 2025-10-27T04:11:06.022Z */
import React from 'react';
import { Eye, EyeOff, Mail, Lock, User, Loader2, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { BrandingConfig } from '../../types';

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

function getFormWidthClass(width?: string): string {
  switch (width) {
    case 'narrow': return 'max-w-sm';
    case 'wide': return 'max-w-2xl';
    default: return 'max-w-md';
  }
}

function getSpacingClass(spacing?: string): string {
  switch (spacing) {
    case 'compact': return 'space-y-4';
    case 'relaxed': return 'space-y-8';
    default: return 'space-y-6';
  }
}

function getShadowClass(intensity?: string, style?: string): string {
  if (style === 'neumorphic') {
    return 'shadow-neumorphic';
  }

  switch (intensity) {
    case 'none': return '';
    case 'light': return 'shadow-md';
    case 'strong': return 'shadow-2xl';
    default: return 'shadow-xl';
  }
}

function getAnimationDuration(speed?: string): string {
  switch (speed) {
    case 'slow': return 'duration-500';
    case 'fast': return 'duration-150';
    default: return 'duration-300';
  }
}

// ============================================================================
// BRANDED CONTAINER
// ============================================================================

interface BrandedContainerProps {
  branding: BrandingConfig;
  children: React.ReactNode;
}

export function BrandedContainer({ branding, children }: BrandedContainerProps) {
  const getBackgroundStyle = () => {
    if (branding.use_gradient && branding.gradient_start && branding.gradient_end) {
      return {
        background: `linear-gradient(135deg, ${branding.gradient_start}, ${branding.gradient_end})`
      };
    }
    return {
      background: branding.background_color || '#F9FAFB'
    };
  };

  const containerClass = `min-h-screen flex items-center justify-center p-8 ${
    branding.blur_background ? 'relative overflow-hidden' : ''
  }`;

  return (
    <div className={containerClass} style={getBackgroundStyle()}>
      {/* Animated Background Blobs for glass/gradient themes */}
      {branding.blur_background && (
        <>
          <div className="absolute top-20 left-20 w-72 h-72 rounded-full mix-blend-multiply filter blur-3xl opacity-70 animate-pulse"
            style={{ backgroundColor: branding.primary_color }}></div>
          <div className="absolute bottom-20 right-20 w-72 h-72 rounded-full mix-blend-multiply filter blur-3xl opacity-70 animate-pulse"
            style={{ backgroundColor: branding.secondary_color, animationDelay: '1000ms' }}></div>
        </>
      )}

      <div className={`relative w-full ${getFormWidthClass(branding.form_width)}`}>
        {children}
      </div>
    </div>
  );
}

// ============================================================================
// BRANDED CARD
// ============================================================================

interface BrandedCardProps {
  branding: BrandingConfig;
  children: React.ReactNode;
}

export function BrandedCard({ branding, children }: BrandedCardProps) {
  const getCardClass = () => {
    const baseClass = `p-8 ${branding.button_style === 'rounded' ? `rounded-${branding.border_radius || 16}px` : ''}`;
    const shadowClass = getShadowClass(branding.shadow_intensity, branding.card_style);

    let styleClass = '';
    switch (branding.card_style) {
      case 'glass':
        styleClass = 'backdrop-blur-2xl border';
        break;
      case 'flat':
        styleClass = 'border';
        break;
      case 'neumorphic':
        styleClass = 'shadow-neumorphic';
        break;
      case 'elevated':
      default:
        styleClass = shadowClass;
        break;
    }

    return `${baseClass} ${styleClass}`;
  };

  const getCardStyle = () => {
    const style: React.CSSProperties = {
      borderRadius: `${branding.border_radius || 16}px`
    };

    if (branding.card_style === 'glass') {
      style.background = branding.card_background || 'rgba(255, 255, 255, 0.1)';
      style.borderColor = 'rgba(255, 255, 255, 0.2)';
      if (branding.card_blur) {
        style.backdropFilter = `blur(${branding.card_blur}px)`;
      }
    } else {
      style.background = branding.card_background || '#FFFFFF';
    }

    return style;
  };

  return (
    <div className={getCardClass()} style={getCardStyle()}>
      {children}
    </div>
  );
}

// ============================================================================
// BRANDED INPUT
// ============================================================================

interface BrandedInputProps {
  type: string;
  id?: string;
  placeholder?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  branding: BrandingConfig;
  icon?: React.ReactNode;
  label?: string;
  showPasswordToggle?: boolean;
  onPasswordToggle?: () => void;
  showPassword?: boolean;
}

export function BrandedInput({
  type,
  id,
  placeholder,
  value,
  onChange,
  branding,
  icon,
  label,
  showPasswordToggle,
  onPasswordToggle,
  showPassword
}: BrandedInputProps) {
  const getInputClass = () => {
    const baseClass = `w-full transition-all ${getAnimationDuration(branding.animation_speed)}`;
    const iconClass = icon ? 'pl-12' : 'pl-4';
    const rightIconClass = showPasswordToggle ? 'pr-12' : 'pr-4';

    switch (branding.input_style) {
      case 'underlined':
        return `${baseClass} px-0 py-3 bg-transparent border-0 border-b-2 focus:outline-none peer`;
      case 'filled':
        return `${baseClass} ${iconClass} ${rightIconClass} py-4 border-2 focus:outline-none`;
      case 'outlined':
      default:
        return `${baseClass} ${iconClass} ${rightIconClass} py-3.5 border focus:outline-none focus:ring-2`;
    }
  };

  const getInputStyle = () => {
    const style: React.CSSProperties = {
      color: branding.text_color || '#1F2937'
    };

    if (branding.input_style === 'underlined') {
      style.borderColor = branding.input_border_color || '#D1D5DB';
    } else {
      style.background = branding.input_background || '#F9FAFB';
      style.borderColor = branding.input_border_color || 'transparent';
      if (branding.button_style === 'rounded') {
        style.borderRadius = `${branding.border_radius || 12}px`;
      }
    }

    return style;
  };

  const labelClass = branding.input_style === 'underlined'
    ? 'absolute left-0 -top-6 text-sm transition-all peer-placeholder-shown:text-base peer-placeholder-shown:top-3 peer-focus:-top-6 peer-focus:text-sm'
    : 'block text-sm font-medium mb-2';

  return (
    <div className="space-y-2">
      {label && branding.input_style !== 'underlined' && (
        <label htmlFor={id} className={labelClass} style={{ color: branding.text_color }}>
          {label}
        </label>
      )}

      <div className="relative group">
        {icon && (
          <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <div style={{ color: branding.input_border_color }}>{icon}</div>
          </div>
        )}

        <input
          type={type}
          id={id}
          className={getInputClass()}
          style={getInputStyle()}
          placeholder={branding.input_style === 'underlined' ? ' ' : placeholder}
          value={value}
          onChange={onChange}
        />

        {branding.input_style === 'underlined' && label && (
          <label htmlFor={id} className={labelClass} style={{ color: branding.text_color }}>
            {label}
          </label>
        )}

        {showPasswordToggle && (
          <button
            type="button"
            onClick={onPasswordToggle}
            className="absolute inset-y-0 right-0 pr-4 flex items-center transition-colors"
            style={{ color: branding.input_border_color }}
          >
            {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
          </button>
        )}
      </div>
    </div>
  );
}

// ============================================================================
// BRANDED BUTTON
// ============================================================================

interface BrandedButtonProps {
  type?: 'button' | 'submit';
  onClick?: (e: React.MouseEvent) => void;
  children: React.ReactNode;
  branding: BrandingConfig;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
  loading?: boolean;
}

export function BrandedButton({
  type = 'button',
  onClick,
  children,
  branding,
  variant = 'primary',
  disabled,
  loading
}: BrandedButtonProps) {
  const getButtonClass = () => {
    const baseClass = `w-full font-semibold transition-all ${getAnimationDuration(branding.animation_speed)}`;
    const transformClass = branding.button_hover_transform && branding.enable_animations
      ? 'transform hover:scale-[1.02] active:scale-[0.98]'
      : '';
    const disabledClass = disabled ? 'opacity-50 cursor-not-allowed' : '';

    let sizeClass = '';
    switch (branding.button_size) {
      case 'small': sizeClass = 'py-2 text-sm'; break;
      case 'large': sizeClass = 'py-5 text-lg'; break;
      default: sizeClass = 'py-4'; break;
    }

    return `${baseClass} ${sizeClass} ${transformClass} ${disabledClass}`;
  };

  const getButtonStyle = () => {
    const style: React.CSSProperties = {};

    if (branding.button_style === 'rounded') {
      style.borderRadius = `${branding.border_radius || 12}px`;
    }

    if (variant === 'primary') {
      if (branding.button_variant === 'gradient' && branding.gradient_start && branding.gradient_end) {
        style.background = `linear-gradient(135deg, ${branding.gradient_start}, ${branding.gradient_end})`;
        style.color = '#FFFFFF';
      } else {
        style.background = branding.primary_color || '#3B82F6';
        style.color = '#FFFFFF';
      }
    } else {
      style.background = branding.secondary_color || '#6B7280';
      style.color = '#FFFFFF';
    }

    if (branding.shadow_intensity && branding.shadow_intensity !== 'none') {
      style.boxShadow = `0 4px 14px 0 ${branding.primary_color}30`;
    }

    return style;
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={getButtonClass()}
      style={getButtonStyle()}
    >
      {loading ? (
        <span className="flex items-center justify-center gap-2">
          <Loader2 className="w-5 h-5 animate-spin" />
          Processing...
        </span>
      ) : (
        children
      )}
    </button>
  );
}

// ============================================================================
// BRANDED MESSAGE
// ============================================================================

type MessageStatus = 'idle' | 'loading' | 'success' | 'error';

interface BrandedMessageProps {
  status: MessageStatus;
  branding: BrandingConfig;
  loadingText?: string;
  successText?: string;
  errorText?: string;
  errorHelpText?: string;
}

export function BrandedMessage({
  status,
  branding,
  loadingText,
  successText,
  errorText,
  errorHelpText
}: BrandedMessageProps) {
  if (status === 'idle') return null;

  const getMessage = () => {
    switch (status) {
      case 'loading':
        return loadingText || branding.message_loading_text || 'Processing...';
      case 'success':
        return successText || branding.message_success_text || 'Success!';
      case 'error':
        return errorText || branding.message_error_text || 'An error occurred';
      default:
        return '';
    }
  };

  const getHelpText = () => {
    if (status === 'error') {
      return errorHelpText || branding.message_error_help_text;
    }
    return null;
  };

  const getMessageClass = () => {
    let baseClass = `mb-6 p-4 transition-all duration-500 ${
      branding.button_style === 'rounded' ? `rounded-${branding.border_radius || 16}px` : 'rounded-lg'
    }`;

    if (branding.card_style === 'glass') {
      baseClass += ' backdrop-blur-xl border';
    }

    const animClass = status === 'loading' ? 'animate-pulse'
      : status === 'success' ? 'animate-slideIn'
      : 'animate-shake';

    return `${baseClass} ${animClass}`;
  };

  const getMessageStyle = (): React.CSSProperties => {
    let backgroundColor = '';
    let borderColor = '';

    switch (status) {
      case 'loading':
        backgroundColor = branding.message_loading_bg || '#DBEAFE';
        borderColor = 'rgba(59, 130, 246, 0.3)';
        break;
      case 'success':
        backgroundColor = branding.message_success_bg || '#D1FAE5';
        borderColor = 'rgba(16, 185, 129, 0.3)';
        break;
      case 'error':
        backgroundColor = branding.message_error_bg || '#FEE2E2';
        borderColor = 'rgba(239, 68, 68, 0.3)';
        break;
    }

    return {
      backgroundColor,
      borderColor,
      color: branding.text_color
    };
  };

  const getIcon = () => {
    const iconClass = "w-6 h-6";
    const iconStyle = { color: branding.text_color };

    switch (status) {
      case 'loading':
        return <Loader2 className={`${iconClass} animate-spin`} style={iconStyle} />;
      case 'success':
        return <CheckCircle className={iconClass} style={iconStyle} />;
      case 'error':
        return <XCircle className={iconClass} style={iconStyle} />;
      default:
        return null;
    }
  };

  return (
    <div className={getMessageClass()} style={getMessageStyle()}>
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 mt-0.5">
          {getIcon()}
        </div>
        <div className="flex-1">
          <p className="font-medium">{getMessage()}</p>
          {getHelpText() && (
            <p className="text-sm mt-1 opacity-80">{getHelpText()}</p>
          )}
        </div>
      </div>
    </div>
  );
}

// ============================================================================
// BRANDED HEADER
// ============================================================================

interface BrandedHeaderProps {
  branding: BrandingConfig;
  logoUrl?: string;
  title: string;
  subtitle?: string;
}

export function BrandedHeader({ branding, logoUrl, title, subtitle }: BrandedHeaderProps) {
  return (
    <div className="text-center mb-8">
      {logoUrl && (
        <div className="inline-flex items-center justify-center w-20 h-20 mb-6"
          style={{
            borderRadius: branding.button_style === 'rounded' ? `${branding.border_radius || 16}px` : '4px'
          }}>
          <img src={logoUrl} alt="Logo" className="w-full h-full object-contain" />
        </div>
      )}
      <h1 className="text-3xl font-bold mb-2" style={{
        color: branding.text_color,
        fontFamily: branding.heading_font_family || branding.font_family
      }}>
        {title}
      </h1>
      {subtitle && (
        <p className="text-lg opacity-80" style={{ color: branding.text_color }}>
          {subtitle}
        </p>
      )}
    </div>
  );
}
