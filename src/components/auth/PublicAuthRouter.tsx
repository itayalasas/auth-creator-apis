/* Auto-generated by AuthSystem - 2025-10-27T04:27:56.724Z */
import React, { useEffect, useState } from 'react';
import BrandedPublicAuth from './BrandedPublicAuth';
import { applicationService } from '../../services/applicationService';
import { supabase } from '../../lib/supabase';
import { useSearchParams } from 'react-router-dom';

interface PublicAuthRouterProps {
  appId: string;
  formType: string;
}

export default function PublicAuthRouter({ appId, formType }: PublicAuthRouterProps) {
  const [appData, setAppData] = useState<any>(null);
  const [apiKey, setApiKey] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchParams] = useSearchParams();

  const validFormType = ['login', 'register', 'reset-password'].includes(formType)
    ? formType as 'login' | 'register' | 'reset-password'
    : 'login';

  useEffect(() => {
    const loadApplicationData = async () => {
      try {
        setLoading(true);
        console.log('Loading application data for:', appId);

        // Get API key from URL first
        const apiKeyFromUrl = searchParams.get('api_key');
        if (apiKeyFromUrl) {
          console.log('‚úÖ API key from URL:', apiKeyFromUrl.substring(0, 20) + '...');
          setApiKey(apiKeyFromUrl);
        } else {
          console.warn('‚ö†Ô∏è No API key in URL');
        }

        try {
          const { data: app, error: appError } = await supabase
            .from('applications')
            .select('*')
            .eq('application_id', appId)
            .single();

          if (appError || !app) {
            console.error('Application not found:', appId, appError);
            setError('Application not found');
            return;
          }

          try {
            const branding = await applicationService.getBranding(app.id);
            setAppData({
              ...app,
              branding: branding || {}
            });
          } catch (brandingError) {
            console.warn('Could not load branding, using defaults:', brandingError);
            setAppData({
              ...app,
              branding: {}
            });
          }

          console.log('Application loaded:', app);

        } catch (supabaseError) {
          console.error('Supabase connection error:', supabaseError);
          setError('Failed to connect to database');
        }

      } catch (error) {
        console.error('Error loading application:', error);
        setError('Failed to load application');
      } finally {
        setLoading(false);
      }
    };

    loadApplicationData();
  }, [appId, searchParams]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Error</h1>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  const handleAuthSubmit = async (formData: any) => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const callbackUrl = urlParams.get('callback_url') || urlParams.get('redirect_uri');

      // Get client IP
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      const clientIp = ipData.ip;

      // Use Supabase Edge Functions directly (hardcoded for production)
      const supabaseUrl = 'https://sfqtmnncgiqkveaoqckt.supabase.co';
      const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNmcXRtbm5jZ2lxa3ZlYW9xY2t0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4MDEyNDMsImV4cCI6MjA3NTM3NzI0M30.n2yaYrfHDLAFePP1tA3-250P6bgKmf696fYJFHfRZaQ';
      const apiBaseUrl = `${supabaseUrl}/functions/v1`;

      console.log('üîß Configuration:', {
        supabaseUrl,
        apiBaseUrl,
        applicationId: appId,
        apiKey: apiKey?.substring(0, 20) + '...',
        callbackUrl
      });

      let endpoint = '';
      let payload: any = {};

      switch (validFormType) {
        case 'login':
          endpoint = `${apiBaseUrl}/auth-login`;
          payload = {
            email: formData.email,
            password: formData.password,
            application_id: appId,
            api_key: apiKey,
            callback_url: callbackUrl,
            client_ip: clientIp
          };
          break;
        case 'register':
          if (formData.password !== formData.confirmPassword) {
            throw new Error('Las contrase√±as no coinciden');
          }
          endpoint = `${apiBaseUrl}/auth-register`;
          payload = {
            email: formData.email,
            password: formData.password,
            name: formData.name,
            application_id: appId,
            api_key: apiKey,
            callback_url: callbackUrl,
            role: formData.role || undefined,
            client_ip: clientIp
          };
          break;
        case 'reset-password':
          endpoint = `${apiBaseUrl}/auth-reset-password`;
          payload = {
            email: formData.email,
            application_id: appId,
            api_key: apiKey,
            redirect_uri: callbackUrl,
            client_ip: clientIp
          };
          break;
      }

      console.log('üöÄ Making API request:', {
        endpoint,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + supabaseAnonKey.substring(0, 30) + '...',
          'apikey': supabaseAnonKey.substring(0, 30) + '...',
          'X-Client-Info': 'authsystem-public-form/1.0'
        },
        payload: { ...payload, password: '***' }
      });

      // Make API request to Supabase Edge Functions
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseAnonKey}`,
          'apikey': supabaseAnonKey,
          'X-Client-Info': 'authsystem-public-form/1.0'
        },
        body: JSON.stringify(payload)
      });

      console.log('üì° Response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error?.message || 'Error de autenticaci√≥n');
      }

      // Handle success - redirect if callback URL exists
      if (result.data?.callback_url) {
        console.log('üîÑ Redirecting to:', result.data.callback_url);
        setTimeout(() => {
          window.location.href = result.data.callback_url;
        }, 2000);
      }

      return result.data;
    } catch (error: any) {
      console.error('‚ùå Auth error:', error);
      throw error;
    }
  };

  return (
    <BrandedPublicAuth
      applicationId={appId}
      formType={validFormType}
      branding={appData?.branding}
      onSubmit={handleAuthSubmit}
      onSuccess={(data) => console.log('Auth success:', data)}
      onError={(error) => console.error('Auth error:', error)}
    />
  );
}
