/* Auto-generated by AuthSystem - 2025-10-27T04:27:56.724Z */
import React, { useState, useEffect } from 'react';
import { Mail, Lock, User, ArrowRight, ArrowLeft, Shield, AlertTriangle, CheckCircle } from 'lucide-react';
import {
  BrandedContainer,
  BrandedCard,
  BrandedInput,
  BrandedButton,
  BrandedMessage,
  BrandedHeader
} from '../ui/BrandedComponents';
import { BrandingConfig } from '../../types';
import { getDefaultBrandingConfig } from '../../utils/themePresets';
import { validateAuthForm, rateLimiter, validatePassword } from '../../utils/securityValidation';

interface BrandedPublicAuthProps {
  applicationId: string;
  formType: 'login' | 'register' | 'reset-password' | 'reset-password-confirm';
  branding?: Partial<BrandingConfig>;
  onSubmit: (data: any) => Promise<void>;
  onSuccess?: (data: any) => void;
  onError?: (error: string) => void;
}

export default function BrandedPublicAuth({
  applicationId,
  formType,
  branding: customBranding,
  onSubmit,
  onSuccess,
  onError
}: BrandedPublicAuthProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [messageStatus, setMessageStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [passwordStrength, setPasswordStrength] = useState<'weak' | 'medium' | 'strong' | 'very-strong'>('weak');
  const [rateLimitInfo, setRateLimitInfo] = useState<{ blocked: boolean; timeLeft: number }>({ blocked: false, timeLeft: 0 });
  const [availableRoles, setAvailableRoles] = useState<any[]>([]);
  const [selectedRole, setSelectedRole] = useState('');

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  // Load available roles for registration
  useEffect(() => {
    const loadRoles = async () => {
      if (formType === 'register' && applicationId) {
        try {
          console.log('üìã Loading roles for application:', applicationId);

          // Get internal app ID first
          const { createClient } = await import('@supabase/supabase-js');
          const supabase = createClient(
            'https://sfqtmnncgiqkveaoqckt.supabase.co',
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNmcXRtbm5jZ2lxa3ZlYW9xY2t0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4MDEyNDMsImV4cCI6MjA3NTM3NzI0M30.n2yaYrfHDLAFePP1tA3-250P6bgKmf696fYJFHfRZaQ'
          );

          // Get internal ID from application_id
          const { data: app, error: appError } = await supabase
            .from('applications')
            .select('id')
            .eq('application_id', applicationId)
            .maybeSingle();

          if (appError || !app) {
            console.warn('‚ö†Ô∏è Could not find application:', applicationId);
            return;
          }

          const internalAppId = app.id;
          console.log('üìã Internal app ID:', internalAppId);

          // Load roles
          const { data: roles, error: rolesError } = await supabase
            .from('application_roles')
            .select('*')
            .eq('application_id', internalAppId)
            .order('display_name');

          if (rolesError) {
            console.error('‚ùå Error loading roles:', rolesError);
            return;
          }

          console.log('‚úÖ Roles loaded:', roles);
          setAvailableRoles(roles || []);

          // Set default role if exists
          const defaultRole = roles?.find((r: any) => r.is_default);
          if (defaultRole) {
            setSelectedRole(defaultRole.name);
            console.log('‚úÖ Default role set:', defaultRole.name);
          }
        } catch (error) {
          console.error('‚ùå Error in loadRoles:', error);
        }
      }
    };

    loadRoles();
  }, [formType, applicationId]);

  // Merge custom branding with defaults
  const branding: BrandingConfig = {
    ...getDefaultBrandingConfig(),
    ...customBranding
  };

  // Helper function to get custom text or fallback to default
  const getText = (key: string, defaultText: string): string => {
    const customTexts = (branding as any).custom_texts || {};
    return customTexts[key] || defaultText;
  };

  // Helper function to build navigation URLs with all required params
  const buildNavUrl = (path: string): string => {
    const params = new URLSearchParams(window.location.search);
    const redirectUri = params.get('redirect_uri');
    const apiKey = params.get('api_key');

    const newParams = new URLSearchParams();
    newParams.set('app_id', applicationId);

    if (redirectUri) {
      newParams.set('redirect_uri', redirectUri);
    }

    if (apiKey) {
      newParams.set('api_key', apiKey);
    }

    return `${path}?${newParams.toString()}`;
  };

  const handleChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setFormData(prev => ({ ...prev, [field]: value }));

    // Validate password strength in real-time (only for register)
    if (field === 'password' && formType === 'register') {
      const validation = validatePassword(value);
      setPasswordStrength(validation.strength);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage('');

    // 1. Rate limiting check (client-side)
    const rateLimitKey = `auth-${formType}-${applicationId}`;
    if (!rateLimiter.canAttempt(rateLimitKey, 5, 60000)) {
      const timeLeft = rateLimiter.getTimeUntilReset(rateLimitKey, 60000);
      const secondsLeft = Math.ceil(timeLeft / 1000);
      setErrorMessage(`Demasiados intentos. Por favor espera ${secondsLeft} segundos.`);
      setMessageStatus('error');
      setRateLimitInfo({ blocked: true, timeLeft });
      return;
    }

    // 2. Validate and sanitize form data
    const validation = validateAuthForm(formData, formType);
    if (!validation.valid) {
      const errorMessages = Object.values(validation.errors);
      setErrorMessage(errorMessages.join('. '));
      setMessageStatus('error');
      return;
    }

    try {
      setLoading(true);
      setMessageStatus('loading');

      // Use sanitized data and add role if selected
      const dataToSubmit = {
        ...validation.sanitized,
        ...(selectedRole && { role: selectedRole })
      };
      await onSubmit(dataToSubmit);

      setMessageStatus('success');
      rateLimiter.reset(rateLimitKey); // Reset on success

      // Simulate redirect after success
      setTimeout(() => {
        if (onSuccess) {
          onSuccess(validation.sanitized);
        }
      }, branding.redirect_delay || 2000);

    } catch (error: any) {
      setMessageStatus('error');
      setErrorMessage(error.message || 'Error al procesar la solicitud');
      if (onError) {
        onError(error.message);
      }
    } finally {
      setLoading(false);
    }
  };

  const getFormTitle = () => {
    switch (formType) {
      case 'login':
        return getText('login_title', 'Iniciar Sesi√≥n');
      case 'register':
        return getText('register_title', 'Crear Cuenta');
      case 'reset-password':
        return getText('reset_title', 'Recuperar Contrase√±a');
      case 'reset-password-confirm':
        return getText('confirm_reset_title', 'Nueva Contrase√±a');
      default:
        return 'Authentication';
    }
  };

  const getFormSubtitle = () => {
    switch (formType) {
      case 'login':
        return getText('login_subtitle', 'Ingresa tus credenciales');
      case 'register':
        return getText('register_subtitle', 'Reg√≠strate para comenzar');
      case 'reset-password':
        return getText('reset_subtitle', 'Te enviaremos un email para recuperar tu contrase√±a');
      case 'reset-password-confirm':
        return getText('confirm_reset_subtitle', 'Ingresa tu nueva contrase√±a');
      default:
        return '';
    }
  };

  const getButtonText = () => {
    if (loading) return 'Procesando...';
    switch (formType) {
      case 'login':
        return getText('login_button_text', 'Iniciar Sesi√≥n');
      case 'register':
        return getText('register_button_text', 'Crear Cuenta');
      case 'reset-password':
        return getText('reset_button_text', 'Enviar Email de Recuperaci√≥n');
      case 'reset-password-confirm':
        return getText('confirm_reset_button_text', 'Cambiar Contrase√±a');
      default:
        return 'Enviar';
    }
  };

  return (
    <BrandedContainer branding={branding}>
      <BrandedHeader
        branding={branding}
        logoUrl={branding.logo_url}
        title={getFormTitle()}
        subtitle={getFormSubtitle()}
      />

      <BrandedCard branding={branding}>
        <BrandedMessage
          status={messageStatus}
          branding={branding}
        />

        {/* Security Error Message */}
        {errorMessage && (
          <div className="mb-4 p-4 rounded-lg bg-red-500/10 border border-red-500/20 flex items-start gap-3">
            <AlertTriangle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <p className="text-sm text-red-200 font-medium">Error de Seguridad</p>
              <p className="text-xs text-red-300/80 mt-1">{errorMessage}</p>
            </div>
          </div>
        )}

        {/* Rate Limit Warning */}
        {rateLimitInfo.blocked && (
          <div className="mb-4 p-4 rounded-lg bg-orange-500/10 border border-orange-500/20 flex items-start gap-3">
            <Shield className="w-5 h-5 text-orange-400 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <p className="text-sm text-orange-200 font-medium">L√≠mite de Intentos Alcanzado</p>
              <p className="text-xs text-orange-300/80 mt-1">
                Por seguridad, debes esperar antes de intentar nuevamente.
              </p>
            </div>
          </div>
        )}

        {/* Reset Password Success Message */}
        {messageStatus === 'success' && formType === 'reset-password' && (
          <div className="mb-6 p-6 rounded-xl bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700/30">
            <div className="flex items-start gap-3 mb-4">
              <CheckCircle className="w-6 h-6 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <p className="text-sm font-medium text-green-800 dark:text-green-200">
                  {getText('reset_success_message', 'Si el email existe en nuestro sistema, recibir√°s un enlace de recuperaci√≥n.')}
                </p>
              </div>
            </div>
            <a
              href={buildNavUrl('/login')}
              className="inline-flex items-center gap-2 text-sm font-medium transition-colors hover:opacity-80"
              style={{ color: branding.primary_color }}
            >
              <ArrowLeft className="w-4 h-4" />
              {getText('reset_back_to_login', 'Volver al inicio de sesi√≥n')}
            </a>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6" style={{ display: messageStatus === 'success' && formType === 'reset-password' ? 'none' : 'block' }}>
          {formType === 'register' && (
            <BrandedInput
              type="text"
              id="name"
              label={getText('register_name_label', 'Nombre Completo')}
              placeholder={getText('register_name_placeholder', 'Tu nombre completo')}
              value={formData.name}
              onChange={handleChange('name')}
              branding={branding}
              icon={<User className="w-5 h-5" />}
            />
          )}

          {formType !== 'reset-password-confirm' && (
            <BrandedInput
              type="email"
              id="email"
              label={formType === 'login' ? getText('login_email_label', 'Email') :
                     formType === 'register' ? getText('register_email_label', 'Email') :
                     getText('reset_email_label', 'Email')}
              placeholder={formType === 'login' ? getText('login_email_placeholder', 'tu@email.com') :
                           formType === 'register' ? getText('register_email_placeholder', 'tu@email.com') :
                           getText('reset_email_placeholder', 'tu@email.com')}
              value={formData.email}
              onChange={handleChange('email')}
              branding={branding}
              icon={<Mail className="w-5 h-5" />}
            />
          )}

          {(formType === 'login' || formType === 'register' || formType === 'reset-password-confirm') && (
            <>
              <div>
                <BrandedInput
                  type={showPassword ? 'text' : 'password'}
                  id="password"
                  label={
                    formType === 'login' ? getText('login_password_label', 'Contrase√±a') :
                    formType === 'register' ? getText('register_password_label', 'Contrase√±a') :
                    getText('confirm_reset_password_label', 'Nueva Contrase√±a')
                  }
                  placeholder={
                    formType === 'login' ? getText('login_password_placeholder', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') :
                    formType === 'register' ? getText('register_password_placeholder', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') :
                    getText('confirm_reset_password_placeholder', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢')
                  }
                  value={formData.password}
                  onChange={handleChange('password')}
                  branding={branding}
                  icon={<Lock className="w-5 h-5" />}
                  showPasswordToggle
                  onPasswordToggle={() => setShowPassword(!showPassword)}
                  showPassword={showPassword}
                />

                {/* Password Strength Indicator (only for register) */}
                {formType === 'register' && formData.password && (
                  <div className="mt-2">
                    <div className="flex items-center gap-2 mb-1">
                      <div className="flex-1 h-1.5 bg-gray-700 rounded-full overflow-hidden">
                        <div
                          className={`h-full transition-all duration-300 ${
                            passwordStrength === 'weak' ? 'w-1/4 bg-red-500' :
                            passwordStrength === 'medium' ? 'w-2/4 bg-orange-500' :
                            passwordStrength === 'strong' ? 'w-3/4 bg-yellow-500' :
                            'w-full bg-green-500'
                          }`}
                        />
                      </div>
                      <span className={`text-xs font-medium ${
                        passwordStrength === 'weak' ? 'text-red-400' :
                        passwordStrength === 'medium' ? 'text-orange-400' :
                        passwordStrength === 'strong' ? 'text-yellow-400' :
                        'text-green-400'
                      }`}>
                        {passwordStrength === 'weak' ? 'D√©bil' :
                         passwordStrength === 'medium' ? 'Media' :
                         passwordStrength === 'strong' ? 'Fuerte' :
                         'Muy Fuerte'}
                      </span>
                    </div>
                    <p className="text-xs text-gray-400">
                      Usa al menos 8 caracteres con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos
                    </p>
                  </div>
                )}
              </div>

              {(formType === 'register' || formType === 'reset-password-confirm') && (
                <BrandedInput
                  type={showPassword ? 'text' : 'password'}
                  id="confirmPassword"
                  label={
                    formType === 'register' ?
                    getText('register_confirm_password_label', 'Confirmar Contrase√±a') :
                    getText('confirm_reset_confirm_password_label', 'Confirmar Nueva Contrase√±a')
                  }
                  placeholder={
                    formType === 'register' ?
                    getText('register_confirm_password_placeholder', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') :
                    getText('confirm_reset_confirm_password_placeholder', '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢')
                  }
                  value={formData.confirmPassword}
                  onChange={handleChange('confirmPassword')}
                  branding={branding}
                  icon={<Lock className="w-5 h-5" />}
                />
              )}
            </>
          )}

          {/* Role Selection (only for register) */}
          {formType === 'register' && availableRoles.length > 0 && (
            <div>
              <label
                htmlFor="role"
                className="block text-sm font-medium mb-2"
                style={{ color: branding.text_color }}
              >
                {getText('role_selection_label', 'Tipo de Usuario')}
              </label>
              <select
                id="role"
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-all"
                style={{
                  borderColor: branding.input_border_color,
                  backgroundColor: branding.input_background,
                  color: branding.text_color,
                  borderRadius: `${branding.border_radius}px`
                }}
              >
                <option value="">{getText('role_selection_placeholder', 'Selecciona un rol')}</option>
                {availableRoles.map((role) => (
                  <option key={role.id} value={role.name}>
                    {role.display_name}
                    {role.description ? ` - ${role.description}` : ''}
                  </option>
                ))}
              </select>
              <p className="text-xs text-gray-500 mt-1">
                {getText('role_selection_description', 'Selecciona el tipo de acceso que necesitas en la aplicaci√≥n')}
              </p>
            </div>
          )}

          <BrandedButton
            type="submit"
            branding={branding}
            disabled={loading}
            loading={loading}
          >
            <span className="flex items-center justify-center gap-2">
              {getButtonText()}
              <ArrowRight className="w-5 h-5" />
            </span>
          </BrandedButton>

          {/* Links */}
          <div className="flex items-center justify-between text-sm">
            {formType === 'login' && (
              <>
                <a href={buildNavUrl('/reset-password')}
                   className="transition-colors hover:opacity-80"
                   style={{ color: branding.primary_color }}>
                  {getText('login_forgot_password_text', '¬øOlvidaste tu contrase√±a?')}
                </a>
                <a href={buildNavUrl('/register')}
                   className="transition-colors hover:opacity-80"
                   style={{ color: branding.primary_color }}>
                  {getText('login_register_link_text', '¬øNo tienes cuenta? Reg√≠strate aqu√≠').split('? ')[1] || 'Reg√≠strate aqu√≠'}
                </a>
              </>
            )}
            {formType === 'register' && (
              <a href={buildNavUrl('/login')}
                 className="transition-colors hover:opacity-80 mx-auto"
                 style={{ color: branding.primary_color }}>
                {getText('register_login_link_text', '¬øYa tienes cuenta? Inicia sesi√≥n')}
              </a>
            )}
            {formType === 'reset-password' && (
              <a href={buildNavUrl('/login')}
                 className="transition-colors hover:opacity-80 mx-auto"
                 style={{ color: branding.primary_color }}>
                {getText('reset_login_link_text', '¬øRecordaste tu contrase√±a? Inicia sesi√≥n')}
              </a>
            )}
          </div>
        </form>
      </BrandedCard>

      {/* Footer */}
      <div className="mt-6 text-center text-sm" style={{ color: branding.text_color, opacity: 0.6 }}>
        Protected by AuthSystem
      </div>

      {/* Custom Styles */}
      <style>{`
        .animate-slideIn {
          animation: slideIn 0.5s ease-out;
        }
        .animate-shake {
          animation: shake 0.5s ease-in-out;
        }
        @keyframes slideIn {
          from {
            transform: translateY(-10px);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }
        .shadow-neumorphic {
          box-shadow: 8px 8px 16px rgba(163, 177, 198, 0.6),
                      -8px -8px 16px rgba(255, 255, 255, 0.5);
        }
        .shadow-neumorphic-inset {
          box-shadow: inset 4px 4px 8px rgba(163, 177, 198, 0.5),
                      inset -4px -4px 8px rgba(255, 255, 255, 0.5);
        }
      `}</style>
    </BrandedContainer>
  );
}
